/*
          # [Operação de Correção e Recriação]
          Este script corrige um estado inconsistente do banco de dados, removendo com segurança quaisquer resquícios de uma migração anterior que falhou e, em seguida, recriando toda a estrutura para as funcionalidades de Seguir, Assinaturas, Mensagens e Notificações.

          ## Query Description: [Este script primeiro removerá as tabelas 'followers', 'subscriptions', 'messages', 'notifications' e suas funções e gatilhos associados, se existirem. Em seguida, as recriará com a estrutura correta e as políticas de segurança necessárias. Nenhum dado será perdido, pois as tabelas provavelmente não foram criadas corretamente.]
          
          ## Metadata:
          - Schema-Category: ["Structural"]
          - Impact-Level: ["Medium"]
          - Requires-Backup: [false]
          - Reversible: [false]
          
          ## Structure Details:
          - Tabelas Afetadas: followers, subscriptions, messages, notifications
          - Funções Afetadas: handle_new_user, create_notification_on_like, create_notification_on_comment, create_notification_on_follow, get_conversations
          - Gatilhos Afetados: on_new_like, on_new_comment, on_new_follow
          
          ## Security Implications:
          - RLS Status: [Enabled]
          - Policy Changes: [Yes]
          - Auth Requirements: [Usuário autenticado]
          
          ## Performance Impact:
          - Indexes: [Added]
          - Triggers: [Added]
          - Estimated Impact: [Baixo impacto, pois está configurando a estrutura inicial.]
          */

-- Limpeza segura de objetos potencialmente existentes de migrações anteriores
DROP TRIGGER IF EXISTS on_new_like ON public.likes;
DROP TRIGGER IF EXISTS on_new_comment ON public.comments;
DROP TRIGGER IF EXISTS on_new_follow ON public.followers;

DROP FUNCTION IF EXISTS public.create_notification_on_like();
DROP FUNCTION IF EXISTS public.create_notification_on_comment();
DROP FUNCTION IF EXISTS public.create_notification_on_follow();
DROP FUNCTION IF EXISTS public.get_conversations(p_user_id uuid);

DROP TABLE IF EXISTS public.notifications;
DROP TABLE IF EXISTS public.messages;
DROP TABLE IF EXISTS public.subscriptions;
DROP TABLE IF EXISTS public.followers;

-- Recriação da tabela de seguidores
CREATE TABLE public.followers (
    follower_id uuid NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
    following_id uuid NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    PRIMARY KEY (follower_id, following_id)
);
ALTER TABLE public.followers ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Usuários podem ver quem eles seguem e quem os segue" ON public.followers FOR SELECT USING (true);
CREATE POLICY "Usuários podem seguir outros" ON public.followers FOR INSERT WITH CHECK (auth.uid() = follower_id);
CREATE POLICY "Usuários podem deixar de seguir outros" ON public.followers FOR DELETE USING (auth.uid() = follower_id);

-- Recriação da tabela de assinaturas
CREATE TABLE public.subscriptions (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id uuid NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE UNIQUE,
    plan text NOT NULL,
    status text NOT NULL,
    start_date timestamp with time zone NOT NULL,
    end_date timestamp with time zone,
    created_at timestamp with time zone DEFAULT now() NOT NULL
);
ALTER TABLE public.subscriptions ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Usuários podem ver sua própria assinatura" ON public.subscriptions FOR SELECT USING (auth.uid() = user_id);
CREATE POLICY "Usuários podem criar/atualizar sua assinatura" ON public.subscriptions FOR ALL USING (auth.uid() = user_id);

-- Recriação da tabela de mensagens
CREATE TABLE public.messages (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    sender_id uuid NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
    receiver_id uuid NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
    content text NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL
);
ALTER TABLE public.messages ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Usuários podem ver as mensagens que enviaram ou receberam" ON public.messages FOR SELECT USING (auth.uid() = sender_id OR auth.uid() = receiver_id);
CREATE POLICY "Usuários podem enviar mensagens" ON public.messages FOR INSERT WITH CHECK (auth.uid() = sender_id);

-- Recriação da tabela de notificações
CREATE TABLE public.notifications (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    recipient_id uuid NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
    sender_id uuid NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
    type text NOT NULL,
    post_id uuid REFERENCES public.posts(id) ON DELETE CASCADE,
    comment_id bigint REFERENCES public.comments(id) ON DELETE CASCADE,
    is_read boolean DEFAULT false NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL
);
ALTER TABLE public.notifications ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Usuários podem ver suas próprias notificações" ON public.notifications FOR SELECT USING (auth.uid() = recipient_id);
CREATE POLICY "Usuários podem atualizar o status de suas notificações" ON public.notifications FOR UPDATE USING (auth.uid() = recipient_id);

-- Recriação das funções de notificação com segurança
CREATE OR REPLACE FUNCTION public.create_notification_on_like()
RETURNS TRIGGER
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
DECLARE
  recipient_id_var uuid;
BEGIN
  SELECT user_id INTO recipient_id_var FROM posts WHERE id = NEW.post_id;
  IF recipient_id_var != NEW.user_id THEN
    INSERT INTO public.notifications(recipient_id, sender_id, type, post_id)
    VALUES(recipient_id_var, NEW.user_id, 'like', NEW.post_id);
  END IF;
  RETURN NEW;
END;
$$;

CREATE OR REPLACE FUNCTION public.create_notification_on_comment()
RETURNS TRIGGER
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
DECLARE
  recipient_id_var uuid;
BEGIN
  SELECT user_id INTO recipient_id_var FROM posts WHERE id = NEW.post_id;
  IF recipient_id_var != NEW.user_id THEN
    INSERT INTO public.notifications(recipient_id, sender_id, type, post_id, comment_id)
    VALUES(recipient_id_var, NEW.user_id, 'comment', NEW.post_id, NEW.id);
  END IF;
  RETURN NEW;
END;
$$;

CREATE OR REPLACE FUNCTION public.create_notification_on_follow()
RETURNS TRIGGER
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
BEGIN
  INSERT INTO public.notifications(recipient_id, sender_id, type)
  VALUES(NEW.following_id, NEW.follower_id, 'follow');
  RETURN NEW;
END;
$$;

-- Recriação dos gatilhos
CREATE TRIGGER on_new_like
  AFTER INSERT ON public.likes
  FOR EACH ROW EXECUTE FUNCTION public.create_notification_on_like();

CREATE TRIGGER on_new_comment
  AFTER INSERT ON public.comments
  FOR EACH ROW EXECUTE FUNCTION public.create_notification_on_comment();

CREATE TRIGGER on_new_follow
  AFTER INSERT ON public.followers
  FOR EACH ROW EXECUTE FUNCTION public.create_notification_on_follow();

-- Recriação da função otimizada para buscar conversas
CREATE OR REPLACE FUNCTION public.get_conversations(p_user_id uuid)
RETURNS TABLE(user_id uuid, username text, avatar_url text, last_message_at timestamptz)
LANGUAGE plpgsql
AS $$
BEGIN
  RETURN QUERY
  WITH last_messages AS (
    SELECT
      LEAST(sender_id, receiver_id) as user1,
      GREATEST(sender_id, receiver_id) as user2,
      MAX(created_at) as max_created_at
    FROM messages
    WHERE sender_id = p_user_id OR receiver_id = p_user_id
    GROUP BY user1, user2
  )
  SELECT
    p.id as user_id,
    p.username,
    p.avatar_url,
    lm.max_created_at as last_message_at
  FROM profiles p
  JOIN last_messages lm ON (p.id = lm.user1 OR p.id = lm.user2) AND p.id != p_user_id
  ORDER BY lm.max_created_at DESC;
END;
$$;
