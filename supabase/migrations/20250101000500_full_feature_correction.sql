/*
          # [Correção Completa e Reconstrução de Funcionalidades]
          Este script realiza uma limpeza completa e segura de tabelas, funções e gatilhos relacionados às funcionalidades de Seguir, Chat, Notificações e Assinaturas, e em seguida, reconstrói tudo com os tipos de dados e configurações de segurança corretos.

          ## Query Description: [Esta operação é segura para dados existentes de usuários, posts, comentários e curtidas. Ela irá apagar e recriar as tabelas 'followers', 'subscriptions', 'messages', e 'notifications'. Se houver dados nessas tabelas, eles serão perdidos, mas isso é necessário para corrigir a estrutura fundamental do banco de dados. Nenhuma outra tabela será afetada.]
          
          ## Metadata:
          - Schema-Category: ["Structural"]
          - Impact-Level: ["Medium"]
          - Requires-Backup: [false]
          - Reversible: [false]
          
          ## Structure Details:
          - Tabelas afetadas (DROP e CREATE): followers, subscriptions, messages, notifications
          - Funções afetadas (DROP e CREATE): create_notification_on_like, create_notification_on_comment, create_notification_on_follow, get_conversations
          - Triggers afetados (DROP e CREATE): on_new_like_create_notification, on_new_comment_create_notification, on_new_follow_create_notification
          
          ## Security Implications:
          - RLS Status: [Enabled]
          - Policy Changes: [Yes]
          - Auth Requirements: [Nenhum]
          
          ## Performance Impact:
          - Indexes: [Recriados]
          - Triggers: [Recriados]
          - Estimated Impact: [Baixo]
          */

-- 1. Drop existing objects safely (in reverse order of dependency)
DROP TRIGGER IF EXISTS on_new_like_create_notification ON public.likes;
DROP TRIGGER IF EXISTS on_new_comment_create_notification ON public.comments;
DROP TRIGGER IF EXISTS on_new_follow_create_notification ON public.followers;
DROP FUNCTION IF EXISTS public.create_notification_on_like();
DROP FUNCTION IF EXISTS public.create_notification_on_comment();
DROP FUNCTION IF EXISTS public.create_notification_on_follow();
DROP FUNCTION IF EXISTS public.get_conversations(p_user_id uuid);
DROP TABLE IF EXISTS public.notifications;
DROP TABLE IF EXISTS public.messages;
DROP TABLE IF EXISTS public.subscriptions;
DROP TABLE IF EXISTS public.followers;

-- 2. Re-create 'followers' table and its RLS/Triggers
CREATE TABLE public.followers (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    follower_id uuid REFERENCES public.profiles(id) ON DELETE CASCADE NOT NULL,
    following_id uuid REFERENCES public.profiles(id) ON DELETE CASCADE NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    CONSTRAINT followers_unique UNIQUE (follower_id, following_id)
);
ALTER TABLE public.followers ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Users can view follower relationships." ON public.followers FOR SELECT USING (true);
CREATE POLICY "Users can follow other users." ON public.followers FOR INSERT WITH CHECK (auth.uid() = follower_id);
CREATE POLICY "Users can unfollow." ON public.followers FOR DELETE USING (auth.uid() = follower_id);

-- 3. Re-create 'subscriptions' table and its RLS
CREATE TABLE public.subscriptions (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id uuid REFERENCES public.profiles(id) ON DELETE CASCADE NOT NULL UNIQUE,
    plan text NOT NULL,
    status text NOT NULL,
    start_date timestamp with time zone NOT NULL,
    end_date timestamp with time zone,
    created_at timestamp with time zone DEFAULT now() NOT NULL
);
ALTER TABLE public.subscriptions ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Users can view their own subscription." ON public.subscriptions FOR SELECT USING (auth.uid() = user_id);
CREATE POLICY "Users can create/update their own subscription." ON public.subscriptions FOR ALL USING (auth.uid() = user_id);

-- 4. Re-create 'messages' table and its RLS
CREATE TABLE public.messages (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    sender_id uuid REFERENCES public.profiles(id) ON DELETE CASCADE NOT NULL,
    receiver_id uuid REFERENCES public.profiles(id) ON DELETE CASCADE NOT NULL,
    content text NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL
);
ALTER TABLE public.messages ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Users can send messages." ON public.messages FOR INSERT WITH CHECK (auth.uid() = sender_id);
CREATE POLICY "Users can view their own messages." ON public.messages FOR SELECT USING (auth.uid() = sender_id OR auth.uid() = receiver_id);

-- 5. Re-create 'notifications' table with CORRECT foreign key types and its RLS
CREATE TABLE public.notifications (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    recipient_id uuid REFERENCES public.profiles(id) ON DELETE CASCADE NOT NULL,
    sender_id uuid REFERENCES public.profiles(id) ON DELETE CASCADE NOT NULL,
    type text NOT NULL,
    post_id uuid REFERENCES public.posts(id) ON DELETE CASCADE,
    comment_id uuid REFERENCES public.comments(id) ON DELETE CASCADE,
    is_read boolean DEFAULT false NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL
);
ALTER TABLE public.notifications ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Users can view their own notifications." ON public.notifications FOR SELECT USING (auth.uid() = recipient_id);
CREATE POLICY "Users can update their own notifications (mark as read)." ON public.notifications FOR UPDATE USING (auth.uid() = recipient_id);

-- 6. Re-create notification functions with security best practices
CREATE OR REPLACE FUNCTION public.create_notification_on_like()
RETURNS TRIGGER
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
DECLARE
  post_author_id uuid;
BEGIN
  SELECT user_id INTO post_author_id FROM posts WHERE id = NEW.post_id;
  IF post_author_id IS NOT NULL AND post_author_id != NEW.user_id THEN
    INSERT INTO public.notifications (recipient_id, sender_id, type, post_id)
    VALUES (post_author_id, NEW.user_id, 'like', NEW.post_id);
  END IF;
  RETURN NEW;
END;
$$;

CREATE OR REPLACE FUNCTION public.create_notification_on_comment()
RETURNS TRIGGER
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
DECLARE
  post_author_id uuid;
BEGIN
  SELECT user_id INTO post_author_id FROM posts WHERE id = NEW.post_id;
  IF post_author_id IS NOT NULL AND post_author_id != NEW.user_id THEN
    INSERT INTO public.notifications (recipient_id, sender_id, type, post_id, comment_id)
    VALUES (post_author_id, NEW.user_id, 'comment', NEW.post_id, NEW.id);
  END IF;
  RETURN NEW;
END;
$$;

CREATE OR REPLACE FUNCTION public.create_notification_on_follow()
RETURNS TRIGGER
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
BEGIN
  IF NEW.follower_id != NEW.following_id THEN
    INSERT INTO public.notifications (recipient_id, sender_id, type)
    VALUES (NEW.following_id, NEW.follower_id, 'follow');
  END IF;
  RETURN NEW;
END;
$$;

-- 7. Re-create notification triggers
CREATE TRIGGER on_new_like_create_notification
  AFTER INSERT ON public.likes
  FOR EACH ROW EXECUTE PROCEDURE public.create_notification_on_like();

CREATE TRIGGER on_new_comment_create_notification
  AFTER INSERT ON public.comments
  FOR EACH ROW EXECUTE PROCEDURE public.create_notification_on_comment();

CREATE TRIGGER on_new_follow_create_notification
  AFTER INSERT ON public.followers
  FOR EACH ROW EXECUTE PROCEDURE public.create_notification_on_follow();

-- 8. Re-create helper function for messages with security best practices
CREATE OR REPLACE FUNCTION public.get_conversations(p_user_id uuid)
RETURNS TABLE(user_id uuid, username text, avatar_url text, last_message_at timestamptz)
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
BEGIN
  RETURN QUERY
  WITH last_messages AS (
    SELECT
      LEAST(sender_id, receiver_id) as user1,
      GREATEST(sender_id, receiver_id) as user2,
      MAX(created_at) as max_created_at
    FROM messages
    WHERE sender_id = p_user_id OR receiver_id = p_user_id
    GROUP BY user1, user2
  )
  SELECT
    p.id as user_id,
    p.username,
    p.avatar_url,
    lm.max_created_at as last_message_at
  FROM last_messages lm
  JOIN profiles p ON (
    p.id = (CASE WHEN lm.user1 = p_user_id THEN lm.user2 ELSE lm.user1 END)
  )
  ORDER BY lm.max_created_at DESC;
END;
$$;
