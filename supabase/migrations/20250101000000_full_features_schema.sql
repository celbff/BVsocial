/*
          # [Full Features Schema]
          Cria a estrutura completa para as funcionalidades de Seguir, Mensagens, Notificações e Assinaturas.

          ## Query Description: [Este script adiciona novas tabelas e lógicas ao banco de dados.
          1.  **followers**: Armazena as relações de quem segue quem.
          2.  **messages**: Armazena as mensagens trocadas entre usuários.
          3.  **notifications**: Armazena notificações de curtidas, comentários e novos seguidores.
          4.  **subscriptions**: Armazena o status da assinatura de cada usuário.
          5.  **Triggers**: Automatiza a criação de notificações.
          Não há risco de perda de dados existentes, pois apenas novas estruturas são criadas.]
          
          ## Metadata:
          - Schema-Category: ["Structural"]
          - Impact-Level: ["Medium"]
          - Requires-Backup: [false]
          - Reversible: [true]
          
          ## Structure Details:
          - Tabelas Criadas: followers, messages, notifications, subscriptions
          - Funções Criadas: handle_new_like_notification, handle_new_comment_notification, handle_new_follow_notification, get_followers_count, get_following_count
          - Triggers Criados: on_new_like, on_new_comment, on_new_follow
          
          ## Security Implications:
          - RLS Status: [Enabled]
          - Policy Changes: [Yes]
          - Auth Requirements: [authenticated]
          
          ## Performance Impact:
          - Indexes: [Added]
          - Triggers: [Added]
          - Estimated Impact: [Baixo. Triggers são leves e executam em segundo plano.]
          */

-- 1. Tabela de SEGUIDORES
CREATE TABLE IF NOT EXISTS public.followers (
    follower_id uuid NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
    following_id uuid NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
    created_at timestamptz DEFAULT now(),
    PRIMARY KEY (follower_id, following_id)
);
ALTER TABLE public.followers ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Usuários autenticados podem seguir outros" ON public.followers FOR INSERT TO authenticated WITH CHECK (auth.uid() = follower_id);
CREATE POLICY "Usuários podem deixar de seguir" ON public.followers FOR DELETE TO authenticated USING (auth.uid() = follower_id);
CREATE POLICY "Todos podem ver as relações de seguir" ON public.followers FOR SELECT USING (true);

-- 2. Tabela de MENSAGENS
CREATE TABLE IF NOT EXISTS public.messages (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    sender_id uuid NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
    receiver_id uuid NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
    content text NOT NULL,
    created_at timestamptz DEFAULT now()
);
ALTER TABLE public.messages ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Usuários podem enviar mensagens" ON public.messages FOR INSERT TO authenticated WITH CHECK (auth.uid() = sender_id);
CREATE POLICY "Usuários podem ver suas próprias mensagens" ON public.messages FOR SELECT USING (auth.uid() = sender_id OR auth.uid() = receiver_id);

-- 3. Tabela de NOTIFICAÇÕES
CREATE TABLE IF NOT EXISTS public.notifications (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    recipient_id uuid NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
    sender_id uuid NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
    type text NOT NULL, -- 'like', 'comment', 'follow'
    post_id bigint REFERENCES public.posts(id) ON DELETE CASCADE,
    is_read boolean DEFAULT false,
    created_at timestamptz DEFAULT now()
);
ALTER TABLE public.notifications ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Usuários podem ver suas próprias notificações" ON public.notifications FOR SELECT USING (auth.uid() = recipient_id);
CREATE POLICY "Usuários podem marcar suas notificações como lidas" ON public.notifications FOR UPDATE USING (auth.uid() = recipient_id) WITH CHECK (auth.uid() = recipient_id);

-- 4. Tabela de ASSINATURAS
CREATE TABLE IF NOT EXISTS public.subscriptions (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id uuid NOT NULL UNIQUE REFERENCES public.profiles(id) ON DELETE CASCADE,
    plan text NOT NULL, -- 'premium', 'business'
    status text NOT NULL, -- 'active', 'inactive', 'cancelled'
    start_date timestamptz,
    end_date timestamptz,
    created_at timestamptz DEFAULT now()
);
ALTER TABLE public.subscriptions ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Usuários podem ver sua própria assinatura" ON public.subscriptions FOR SELECT USING (auth.uid() = user_id);
CREATE POLICY "Usuários podem criar sua própria assinatura" ON public.subscriptions FOR INSERT TO authenticated WITH CHECK (auth.uid() = user_id);

-- 5. Funções e Triggers para NOTIFICAÇÕES
-- Trigger para CURTIDAS
CREATE OR REPLACE FUNCTION public.handle_new_like_notification()
RETURNS TRIGGER AS $$
DECLARE
  post_author_id uuid;
BEGIN
  -- Encontra o autor do post
  SELECT user_id INTO post_author_id FROM public.posts WHERE id = NEW.post_id;
  
  -- Insere notificação apenas se o liker não for o autor do post
  IF NEW.user_id <> post_author_id THEN
    INSERT INTO public.notifications (recipient_id, sender_id, type, post_id)
    VALUES (post_author_id, NEW.user_id, 'like', NEW.post_id);
  END IF;
  
  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

DROP TRIGGER IF EXISTS on_new_like ON public.likes;
CREATE TRIGGER on_new_like
  AFTER INSERT ON public.likes
  FOR EACH ROW EXECUTE PROCEDURE public.handle_new_like_notification();

-- Trigger para COMENTÁRIOS
CREATE OR REPLACE FUNCTION public.handle_new_comment_notification()
RETURNS TRIGGER AS $$
DECLARE
  post_author_id uuid;
BEGIN
  SELECT user_id INTO post_author_id FROM public.posts WHERE id = NEW.post_id;
  
  IF NEW.user_id <> post_author_id THEN
    INSERT INTO public.notifications (recipient_id, sender_id, type, post_id)
    VALUES (post_author_id, NEW.user_id, 'comment', NEW.post_id);
  END IF;
  
  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

DROP TRIGGER IF EXISTS on_new_comment ON public.comments;
CREATE TRIGGER on_new_comment
  AFTER INSERT ON public.comments
  FOR EACH ROW EXECUTE PROCEDURE public.handle_new_comment_notification();

-- Trigger para SEGUIDORES
CREATE OR REPLACE FUNCTION public.handle_new_follow_notification()
RETURNS TRIGGER AS $$
BEGIN
  INSERT INTO public.notifications (recipient_id, sender_id, type)
  VALUES (NEW.following_id, NEW.follower_id, 'follow');
  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

DROP TRIGGER IF EXISTS on_new_follow ON public.followers;
CREATE TRIGGER on_new_follow
  AFTER INSERT ON public.followers
  FOR EACH ROW EXECUTE PROCEDURE public.handle_new_follow_notification();

-- 6. Funções para contagem de seguidores/seguindo
CREATE OR REPLACE FUNCTION get_followers_count(p_user_id uuid)
RETURNS integer AS $$
DECLARE
  followers_count integer;
BEGIN
  SELECT count(*)
  INTO followers_count
  FROM public.followers
  WHERE following_id = p_user_id;
  
  RETURN followers_count;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION get_following_count(p_user_id uuid)
RETURNS integer AS $$
DECLARE
  following_count integer;
BEGIN
  SELECT count(*)
  INTO following_count
  FROM public.followers
  WHERE follower_id = p_user_id;
  
  RETURN following_count;
END;
$$ LANGUAGE plpgsql;
